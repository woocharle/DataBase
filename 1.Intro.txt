DBMS(DataBaseManagementSystem): 데이터베이스를 관리하는 시스템

1. 개념
	
 (1) Data : 외부에서 관찰 및 수집을 통해 얻은 실제 값.

 (2) Information(정보): Data를 의사결정하기 쉽도록 가공한 것.

 (3) DataBase
     1) 정의
        - 필요한 정보를 얻기 위해 연관된 데이터를 
        - 서로 관련된 Data들을 일정한 체계와 순서로 모아놓은 Data집합.
        - 현재 운영되는 정보를 통합해서 저장되어 있으며 공용으로 사용하는 것. (중복은 최소화)

     2) 개념(4가지)
        - Integrated data
          데이터를 통합하는 개념으로 각자 사용하던 데이터의 중복을 최소화하여 중복으로 인한 
          데이터 불일치 현상을 제거

        - Stored data
          문서로 보관된 데이터가 아니라 디스크, 테이프 같은 컴퓨터 저장장치에 저장된 데이터

        - Operational data
          조직의 목적을 위해 사용되는 데이터, 즉 업무를 위한 검색을 할 목적으로 저장된 데이터
    
        - Shard data
          한 사람 또는 한 업무를 위해 사용되는 데이터가 아니라 공동으로 사용되는 데이터.

     3) 특징
        - 실시간 접근
        - 계속적인 변화(삽입, 삭제, 수정)
	- 동시공유
	- 내용에 따른 참조(검색)
          DB에 저장된 데이터는 데이터의 물리적인 위치가 아니라 데이터 값에 따라 참조 된다.
              
     4) 구성 
	- 행: 튜플, row, Record
      
        - 열: 컬럼, 속성(Attribute)
		 
        - 도메인: 열의 데이터의 타입과 크기, 제약조건 등을 지정하는 정보

	- 스키마: 데이터베이스, 테이블의 구조, 외부스키마, 개념스키마, 내부스키마

	  외부스키마(논리스키마): 사용자가 보는 데이터, 서브스키마

	  개념스키마: 외부스키마를 하나로 통합한 것.

          내부스키마(물리 스키마): 물리적 저장 장치에 실제로 저장되는 방법을 표현한 것. 
      		 	
        - 키

	  기본키(PK, Primary key): 튜플을 식별할 수 있는 고유한 값을 가져야 한다. (유일키(UNIQUE)
                                   NULL값이 아니어야 한다.
          외래키(FK, Foriegn key): 어느 테이블에서는 기본키이지만, 다른 Table에서는 하나의 컬럼만으로 존재.

 (4) swap / swapmemory
     - 데이터처리를 위한 메모리 용량을 확보하기 위해 하드디스크의 저장 장치를 메모리로 사용.

 (5) 관계형 DB(오라클, MySQL, MariaDB, MsSQL)
      	
 (6) ERP 시스템 : 전사적관리시스템, 인사 및 총무 등을 관리하는 시스템.

 (7) SQL(Structured Query Language)란?
     관계형 데이터베이스 관리 시스템의 데이터를 관리하기 위해 설계된 특수 목적의 프로그래밍 언어.

2. 오라클

 (1) 자료형

     1) 숫자: 정수 => number(), number(4) (전체 4자리 수)
              실수 => number(), number(4, 1) (전체 4자리 수, 소수점 자리수)

     2) 문자: 고정길이 => char(크기)
              가변길이 => varchar2(크기) => 4KB
                          varchar2보다 많은 양은 clob(크기) => 4GB
        ** 영문자 대소문자, 숫자 => 1byte, 영어 숫자를 제외한 글자 => 3byte		

     3) 날짜: data('2020/06/01')

        ** 문자, 날짜는 반드시 홀따옴표를 사용해야 된다. 

     * 접속창에 원하는 요소를 누르고 새로고침을 해야된다.


 (2) 명령어

    - CRAETE USER 만들계정 IDENTIFIED BY 비밀번호;
      *Oracle 12c부터는 공통계정 앞에 c##을 붙이도록 네이밍 규칙 변경  

    - GRANT CONNECT, RESOURCE TO 해당계정;
      GRANT: 권한 부여 명령어	

    - ALTER USER 해당계정 default tablespace USERS QUOTA unlimited on users;	
      => 해당계정이 tablespace를 이용하게 해줌.	
       
    - 내 계정에 접속해서 먼저 할 일: TABLE확인

* Tip : DBMA가 돈을 많이 벌지만, 취업률이 낮다. 시스템은 뚫리지 않지만 사람이 뚫리게 한다.
        Supervisor가 휴가가면 원칙을 어기고 직원들에게 공개.


3. SQL
 
 (1) 기능에 따른 분류
     * 객체 안에 테이블, 테이블 안데 데이터	

     1) DDL(데이터정의어): 데이터베이스 객체를 정의하는 언어
        - CREATE(생성), ALTER(변경), DROP(삭제) 

        - ex) CREATE (생성)
          * 기본적으로 테이블은 기본키가 존재.
                    
            방법1) 기본키가 하나일 때만 가능
        
		CREATE TABLE table_name (
    			컬럼이름 datatype NOT NULL PRIMARY KEY,
			컬럼이름 datatype,
		);

	    방법2) 기본키가 KEY 하나 또는 여러개 일때 모두 가능

		CREATE TABLE table_name (
    			컬럼이름 datatype NOT NULL,
			컬럼이름 datatype NOT NULL,
       			컬럼이름 datatype,
			PRIMARY KEY (컬럼이름, 컬럼이름)
		);
         
        - ex) CREATE (복사)

	    방법1) 구조와 내용 모두 복사
		
		CREATE TABLE table_name(new) AS 
			SELECT * or 컬럼이름1, 컬럼이름2....
			FROM table_name(복사대상) 
			WHERE;
		

            방법2) 구조만 복사	(WHERE를 FALSE로 만듬. =는 비교연산자.)

		CREATE TABLE table_name(new) AS 
			SELECT * or 컬럼이름1, 컬럼이름2....
			FROM table_name(복사대상) 
			WHERE 1 = 0;
      
	- ex) DROP TABLE table_name;

	- ex) ALTER

	      컬럼 추가
	
	      ALTER TABLE table_name ADD 컬럼이름 datatype(size);

	      ALTER TABLE member01 ADD m_addr VARCHAR2(50);

	      컬럼 삭제

	      ALTER TABLE table_name DROP COLUMN 컬럼이름;

	      ALTER TABLE member01 DROP COLUMN m_addr; 	

	      컬럼 변경 
              * 해당 COLUMN에 데이터가 있으면... 변경불가, 자료형이 달라도 변경 불가.
                그리고 현재 가지고 있는 데이터의 크기보다 크게만 변경할 수 있다. 
		COLUMN에 데이터가 없으면, 컬럼의 자료형과 크기를 마음대로 변경할 수 있다.

	      ALTER TABLE member01 MODIFY 컬럼이름 datatype(size);	    
		
	      ALTER TABLE member01 MODIFY m_age VARCHAR2(50);

	- ex) 테이블 이름 변경

	      ALTER TABLE table_name(before) rename to table_name(after);
   	


	- desc table_name: 해당 테이블을 스트립트 출력에 보여줌.

     2) DML(데이터조작어): 테이블 안에 존재하는 데이터를 검색, 삽입, 수정, 삭제에 사용되는 언어
        - SELECT(검색), INSERT(삽입), UPDATE(수정), DELETE(삭제)
	- 개발자들이 많이 쓴다.	
	- 수정 및 삭제는 조건을 지정하지 않으면 전체 삭제 된다. 
	- 데이터를 조작하고 나서 문제없다고 판단하면 COMMIT을 해야 한다.
        - 문제 있다고 판단시 ROLLBACK을 한다.


       2-1) 삽입(INSERT INTO)
             
            INSERT INTO table_name values(데이터값, ....);
		
            *주의: 
             ① 값은 순서대로 모두 채운다. 
             ② 중간에 비워있으면 오류가 발생하면 null이라도 넣어야 된다.
             ③ 속성이 not null이면 null을 넣지 못한다.
	     ④ 명령어를 한꺼번에 수행할 때 수행 했던 명령어를 다시 하면 오류가 생긴다.


	    INSERT INTO table_name(컬럼명,...) values(데이터값, ....);
	    
  			
       2-2) 갱신(UPDATE SET)

	    UPDATE table_name 
		SET 해당컬럼1 = 변경값, 해당컬럼2 = 변경값, ...
		WHERE (조건절);
				
	    ex)
		UPDATE book 
    		    SET price = 40000 
    		    WHERE bookid = 4;

	     * 한 가지 튜플만 고치고 싶을 때 Pk를 쓴다.

       2-3) 삭제(DELETE FROM)

	    DELETE FROM table_name
		WHERE (조건절);
	
       2-4) 검색(SELECT FROM)
		
            SELECT [ALL(생략가능) | DISTINCT ] * or [ALL(생략가능) | DISTINCT ]속성1, [ALL(생략가능) | DISTINCT ]속성2....
	    FROM table_name
	    WHERE 조건1, 조건2
	    GROUP BY 속성1, 속성2...
	    HAVING 검색조건
	    ORDER BY 속성이름[ASC|DESC]
		
	    * 조건식 (=, <>, >=, <=, >, <)
	    * ASC: 오름차순, DESC: 내림차순
            * DISTINCT: 중복제거. 다른 속성과 함께 사용하면 안 된다.		

	    테이블의 모든 내용 검색: SELECT * FROM table_name; 	
		
            * 조건절, 와일드 문자: ppt 3장 강의_SQL 기초 3.1.2 참고 
              IN(속성1, 속성2...) : 해당 속성들에 포함된 것
	      NOT IN(속성1, 속성2...) : 해당 속성들에 포함되지 않는 것.
	      LIKE: 해당 속성 중 원하는 도메인 찾을 때, 찾고 싶은 DATA의 이름이 애매하게 기억날 때

	      IS NULL, IS NOT NULL: NULL인지 아닌지 확인. 절대 =NULL, <>NULL을 쓰면 안 된다.

	      %는 모든문자, _: 한 글자.
	      ex) 
		축구% => 축구로 시작하는
		%축구  -> 축구로 끝나는
		_구% => 두 번째 위치에 '구'가 들어가는 문자열 	

	    * ORDER BY는 ASC|DESC 둘 중 하나를 지정 안하면 ASC로 시작한다.
	
 	    * GROUP BY: 속성값이 같은 것 끼리 묶어서 그룹을 만든다. 집합함수 사용 가능.

  	    * HAVING: WHERE가 SELECT에서 가져온 구문을 다루지 못하는 것을 보안하기 위한 함수.
	     	      GROUP BY이후로 쓸 수 있다. 	

	    * WHERE => GROUP BY => HAVING 순서는 반드시 지켜야 한다.	

     3) DCL(데이터제어어): 데이터의 사용권한을 관리하는데 사용하는 언어.
        - COMMIT: 현재상태를 DB에 저장.
        - ROLLBACK: 이전에 저장(COMMIT)한 상태로 데이터를 되돌림.
        - GRANT(권한부여), REVOKE(권한회수) 
 	- 슈퍼 계정에서 한다.

 (2) 집계함수 : sum(컬럼명), avg(컬럼명), max(컬럼명), min(컬럼명), count(*)

     ex1) saleprice 의 총합계를 구하시오. 
 	
	SELECT SUM(saleprice) 총합계(별칭) FROM orders;

     ex2) custid가 2인 책의 총합계

	SELECT SUM(saleprice) 총합계
    	FROM orders
    	WHERE custid = 2;
    
	SELECT SUM(saleprice), AVG(saleprice), MIN(saleprice), MAX(saleprice) FROM orders;

	SELECT COUNT(*)
    	FROM orders
    	WHERE custid = 2;

     
 (3) 2개 이상의 테이블 

     1) JOIN함수 없이 2개 이상의 테이블 겹치기 3.3.1 참고
 	- 내부조인
	  여러 테이블의 공통적으로 존재하는 컬럼의 값이 일치하는 행을 연결, 
          보통은 외래키로 테이블과 테이블 연결
	
	  SELECT * 
	  FROM 테이블 이름1, 테이블 이름2
	  WHERE 테이블 이름1.컬럼명 = 테이블이름2.컬럼명
	  (ORDERED BY ID 테이블 이름.컬럼명);
	  
	  ※ WHERE에 있는 컬럼은 FROM에 올린 테이블들의 공통된 컬럼이어야 된다.
	  ※ ORDERED BY를 쓸 때 반드시 컬럼명 앞에 반드시 table_name을 붙여야 한다.     
  	  ex)

     2) 별칭 사용
        SELECT 별칭1.컬럼이름, 별칭2.컬럼이름
    	FROM table_name1 별칭1, table_name2 별칭2
    	WHERE 별칭1.컬럼이름 = 별칭2.컬럼이름;

     3) 집계함수를 사용할 때... 
	GROUP BY를 써서 그룹을 만들거나 JOIN을 써야된다.

     4) JOIN: 2개 이상의 테이블로 쿼리문을 작성하는 것.
     

     5) 부속질의 (sub-query, 쿼리 안에 쿼리)
	설명: 질의문 속에 질의문을 넣는것. java에서 for문안에 if문이나 다른 for문을 넣는 것으로 보면 된다.
     	
	- 단일행 연산자: 결과가 한줄. 비교연산이 주로 쓰임.
	
     	  SELECT bookname
    	  FROM book
    	  WHERE price =(SELECT MAX(price)
            		FROM book);

        - 다중행 연산자: 결과가 여러줄. in, any, all, exists가 주로 쓰임. 

	  SELECT c_name
          FROM customer
          WHERE custid IN (SELECT DISTINCT custid
            	 	   FROM orders);

     6) 상관부속 질의 : 상의 투플을 이용해서 하의 튜플을 계산
	EX) 출판사별로 출판사의 평균 도서 가격보다 비싼 도서를 출력하시오.

	SELECT b1.bookname
    	FROM book b1
    	WHERE b1.price > (SELECT avg(b2.price)
                          FROM book b2
                          WHERE b2.publisher = b1.publisher);

 (5) EXIST
	SELECT 컬럼이름1, 컬럼이름2...
	FROM table_name1 별칭1
 	WHERE EXIST(SELECT *
		    FROM table2 별칭2
	            WHERE 별칭1.컬럼이름 = 별칭2.컬럼이름);


===========================================================================================================	


3. PL / SQL
 (1) Intro
     1) 정의
        오라클에서 지원하는 프로그래밍 언어의 특성을 수용한 SQL의 확장 SQL의 쿼리문 + 제어문을 사용.
        절차적 프로그램이 가능하게 한 오라클 SQL 전용언어 

     2) 장점: 프로그램의 모듈화(부품화) => 분리, 연결 할 수 있는 작은 블록단위의 구성

     3) 참조: http://www.tutorialspoint.com/plsql/index.htm   

 (2) 프로시저
     1) 정의 
        return 예약어를 사용하지 않음. 결과를 가지고 되돌아 가려면 out 예약어를 사용해야 한다. 
        작업순서가 정해진 독립된 프로그램의 수행 단위.

     2) 기본구조:  [ 선언절 ], 실행절, [예외절]
        선언절: Declear
        실행절: begin ~ end
        예외절: exception

     3) 익명프로시저: 일회용, 저장되지도 않는다.

	3-1) 선언문
        Declear  
		변수선언;
	begin 
		SQL 문장
	end
	

        익명프로시져를 활용한 제어문 연습
	자바	                        익명 프로시저
        
        자료형 변수 = 값;          =>   변수 자료형 := 값;   ex) i int := 0;
	System.out.println(내용)   =>   dbms_output.put_line();

 	dbms_output.put_line()을 사용하기 위해서는 set serveroutput on; 
	set serveroutput on은 한 번 실행만 하면 되기 때문에 주석처리를 한다.
	지우개로 지울 경우	

	3-2) 조건문 
	    if 조건식 then 명령문1(sql문);
            elsif 조건식 then 명령문2(sql문);
	    elsif 조건식 then 명령문3(sql문);
            elsif 조건식 then 명령문4(sql문)
	    else 명령문5(sql문);
	    end if;

	    ex) 
	    DECLARE
    		i int := 100;
    		res VARCHAR2(50) := ' ';
    
	    BEGIN
    		if i >= 90  then 
        		res := 'A';
    		elsif i >= 80 then
        		res := 'B';
    		elsif i >= 70 then
        		res := 'C';
    		else
        		res := 'F';
    		end if;
    
    		dbms_output.put_line('성적은 '|| res || '입니다.');
    
	    END ;
	

            * switch case가 없다.
	    Oracle PL에서는 ||가 연결자 이다.
	
	3-3) 반복문: for문, while문, loop문
	     - for문
		for 변수 in 초기값..최종값 loop
		    명령문;
		end loop;

	     - while문
		while 조건식 loop
		      명령문;
		      증감식;
		end loop;		
	
	     - loop문
		loop
			명령문;
			exit when 조건식; ==> 조건식이 참일 때 탈출.
		end loop;
	
	
     4) 배열
        4-1) 형식: TPYE 배열이름 IS VARRAY(배열크기) OF 배열 타입;
	           ex) TYPE name_arr IS VARRAY(5) OF VARCHAR2(50);

	4-2) 배열을 저장할 변수, 자료형을 배열로 지정
 	    
	4-3) 사례
	     



     5) 프로시저
	* 문법이 틀려도 컴파일이 된다. 수정을 할 경우 프로시저 폴더로 가서 프로시저를 수정하면 된다.

	5-1) 프로시저 저장 
	     형식 CREATE [or REPLACE] PROCEDURE 프로시져이름 
	     (변수 [IN or OUT] [data_type or table_name.column_name%TYPE]) as | is
	     변수 선언 1;     => 변수 OUT [data_type or table_name.column_name%TYPE]과 달리 DECLARE를 
				 할 필요 없다. 
	     변수 선언 2;
	     ....
	     BEGIN 명령문 (update, insert, delete는 sql과 같지만, selct문은 아니다.)
	     END;

	5-2) 프로시저 실행 (IN 사용)
	     변수를 입력할 경우 EXEC 해당 프로시저이름.
		
	     프로시저 실행 (OUT 사용)
	     변수를 입력할 경우 EXEC 해당 프로시저이름.

	5-3) 프로시저 삭제
	     DROP 해당 프로시저이름.
	
	5-3) 사례_1 
	     CREATE PROCEDURE c_name AS
	     BEGIN
    		UPDATE members SET m_name = '마이콜' WHERE idx = 2; 
	     END;

	     EXEC c_name;
	     
	     사례_2
	     CREATE PROCEDURE c_name2 (v_idx IN NUMBER, v_name IN VARCHAR2) AS
	     BEGIN 
    		UPDATE members 
    		SET m_name = v_name
    		WHERE idx = v_idx; 
	     END;


	* 프로시저를 선언하고 나서 프로시저를 수정하려면 프로시저 -> 해당 프로지저로 들어가서 
          수정할 수 있다.	

	5-4) begin ~ end 안에서 사용되는 select문
	     CREATE PROCEDURE procedure_name (변수....) AS
	     저장 변수 data_type;
	     BEGIN
             	SELECT 저장변수를 넣을 column	    
	     	INTO 저장변수 (결과값 저장, 하나만 받을 수 있다.)
	     	FROM table_name
	     	WHERE 조건식;
	     END;
	     ** 특징: WHERE 조건식을 사용해서 결과가 하나만 나오게 하자.
		      나온 결과는 INTO 다음에 있는 저장변수에 저장.


	5-5) 프로시저 안에 프로시저를 만들고 선언 할 수 있다. 
	     CREATE PROCEDURE b_test(v_id book.bookid%TYPE) AS
    		v_name book.bookname%TYPE;
    		v_price book.price%TYPE;
    		PROCEDURE book_test3(v_id book.bookid%TYPE) AS
    	     BEGIN
        	SELECT bookname, price
        	INTO v_name, v_price
        	FROM book
        	WHERE bookid = v_id;
    	     END;
	     BEGIN
    		book_test3(v_id, v_name, v_price);
    		dbms_output.put_line('책 이름 ' || v_name);
    		dbms_output.put_line('책 가격 ' || v_price);
	     END;

 (3) function
     1) 정의
        반드시 return 예약어 사용, 보통은 SQL문에서 호출해서 사용, 컬럼을 가공해서 반환

     2) 형식
        CREATE FUNCTION 이름()		CREATE PROCEDURE 이름() AS
	RETURN data_type;		BEGIN
	AS				    실행문
	BEGIN				END;
	    실행문(SQL문)
	END;

     * 실행: SQL문에서 호출.            * EXEC 프로시저 이름으로 호출.	

     3) 함수를 이용하려면 테이블의 약어를 써야한다.
	abbreviation: 약자

	SELECT (abbr). * , funtion_name(abbr.column_name) AS (new column_name) FROM table_name (abbr);

 (4) 커서(cursor) : 실행결과 테이블을 한 번에 한 행씩 처리하기 위해서 테이블의 행을 순서대로 
                    가리키는데 사용

     1) 커서와 관련된 키워드 
	- 형식
        cursor 커서_name is 커서_정의  => 커서 생성
	open 커서_name                 => 커서의 사용을 시작
	fetch 커서_이름 into 변수      => 행 데이터를 가져옴.
	close 커서_name                => 커서의 사용을 끝냄
 
	- rowcount: 행의 수
        - isopen: 암시적일 대 항상 false, 명시적일 때 열림과 닫힘을 알아보는 명령어
        - found: 결과가 1개 이상인 경우 true;
	- not found: 결과가 하나도 없는 경우 true;

     2) 암시적 커서: 자동으로 열림과 닫힘, 그리고 데이터 처리가 된다.

     3) 명시적 커서: 수동으로 개발자에 의해서 열림, 닫힘 그리고 데이터 처리가 명시됨.
	- 사례
	CREATE PROCEDURE cursor_test_2 AS
    		CURSOR cur IS SELECT bookname FROM book;
    		b_name book.bookname%TYPE;
	BEGIN
    		OPEN cur;
    		loop 
        		FETCH cur
        		INTO b_name;
        		dbms_output.put_line(b_name);
        		exit when cur%notfound;
        
   	 	end loop;
    		CLOSE cur;

	END;
        
 (5) 트리거(trigger)
	
     1) 정의: 자동 실행 기능, 특정 이벤트를 수행할 때 

     2) 특징
        - 호출해서 사용하지 않음.
	- 특정이벤트가 발생하면 자동으로 실행됨.
	- 특정이벤트: insert, update, delete
	- 실행방법: before, after 중 하나

     3) 형식
	CREATE TRIGGER trigger_name BEFORE | AFTER
		트리거 이벤트 on 타겟테이블 이름
		[for each row]	
		[when 조건절]
		
		* for each row: 영향을 받는 각 행에 대해 트리거를 실행 시킬 때 
	BEGIN
		내용
	END;

     4) 주의사항: 
	- insert 경우 입력된 데이터가 :new에 저장된다.
	- delete 경우 삭제된 데이터가 :old에 저장된다.
	- update 경우 변경전: old, 변경후 : new에 저장된다.
	- begin ~ end를 벗어나면 old, new로 사용된다.

     5) 트리거 삭제   : DROP TRIGGER trigger_name;

     6) 트리거 활성   : ALTER TRIGGER trigger_name ENABLE;

     7) 트리거 비활성 : ALTER TRIGGER trigger_name DISABLE;	
   
	





















		



     